//
// TACO: Translation of Annotated COde
// Copyright (c) 2010 Universidad de Buenos Aires
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA,
// 02110-1301, USA

//-------------- java_lang_String --------------//
module java_lang_String
sig java_lang_String extends java_lang_Object {} {}

field java_lang_String_length:(java_lang_String)->one(JavaPrimitiveIntegerValue) {}
field java_lang_String_contents:java_lang_String->(JavaPrimitiveIntegerValue set -> one JavaPrimitiveCharValue) {}

object_invariant all oa: java_lang_String | {pred_java_primitive_integer_value_gte_zero[oa.java_lang_String_length]}

program java_lang_String::Constructor[
  var thiz:java_lang_String,
  var throw:java_lang_Throwable+null]
Specification
{
	SpecCase #0 {
		ensures {
      		throw'=null
		}
	}
}
Implementation
{
    throw:=null;
    thiz.java_lang_String_length := 0;
    thiz.java_lang_String_contents := (none->none);
    // havoc thiz;
}

program java_lang_String::length[
	var thiz:java_lang_String,
	var throw:java_lang_Throwable+null,
	var return:JavaPrimitiveIntegerValue]
Specification
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[return', thiz'.java_lang_String_length'])
		}
	}
}
Implementation
{
    throw:=null;
    return:=thiz.java_lang_String_length;
}

program java_lang_String::charAt[
	var thiz:java_lang_String,
	var throw:java_lang_Throwable+null,
	var return:JavaPrimitiveCharValue,
	var index:JavaPrimitiveIntegerValue]
Specification
{
	SpecCase #0 {
		ensures {
      		(throw'=null)
		}
	}
}
Implementation
{
    throw:=null;
    if (pred_java_primitive_integer_value_lt_zero[index] or pred_java_primitive_integer_value_gte[index, thiz.java_lang_String_length]) {
        throw:=java_lang_IndexOutOfBoundsExceptionLit;
    } else {
        return:=index.(thiz.java_lang_String_contents);
    };
}
